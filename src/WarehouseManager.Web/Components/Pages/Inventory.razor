@page "/inventory"
@using EventInventoryManager.ViewModels
@using Microsoft.AspNetCore.Authorization
@using WarehouseManager.Application.Interfaces
@using WarehouseManager.Core.Entities.InventoryPage
@using WarehouseManager.Core.Enums
@using WarehouseManager.Web.ViewModels

@inject IInventoryItemRepository InventoryRepo
@inject ICategoryRepository CategoryRepo



@attribute [Authorize]

<PageTitle>Inventory Dashboard</PageTitle>

<div class="inventory-page-container">

    @* TITLE AND ADD BUTTON *@
    <div class="page-header">
        <div class="page-header-title">
            <h1 class="primary-text">Manage Inventory</h1>
            <p>Manage your warehouse equipment and stock</p>
        </div>
        <button class="btn btn-primary btn-add-item" @onclick="OpenAddModal">
            <i class="fas fa-plus"></i>
            <span>Add New Item</span>
        </button>
    </div>

    @* SEARCH AND FILTER BOXES *@
    <div class="page-toolbar">
        <div class="toolbar-actions">
            <div class="search-container">
                <i class="fas fa-search search-icon"></i>
                <input type="text" class="form-control search-input" placeholder="Search..."
                       @bind="_searchQuery" @bind:event="oninput"/>
            </div>
            <button class="btn btn-secondary btn-filter" @onclick="OpenFilterModal">
                <i class="fas fa-filter"></i>
                <span>Filter</span>
            </button>
        </div>
    </div>

    @* INVENTORY TABLE *@
    @if (_allItems is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="page-inventory-table">
            <div>
                <h3>
                    <i class="fas fa-box-archive"></i> <span>Inventory Items</span>
                </h3>
                <p>Complete list of warehouse equipment and their current status</p>
            </div>
            <div class="table-container">
                <table class="inventory-table align-middle">
                    <thead>
                    <tr>
                        <th>Name</th>
                        <th class="text-center">Quantity</th>
                        <th class="text-center">Category</th>
                        <th class="text-center">Availability Status</th>
                        <th class="text-center">Rental Status</th>
                        <th class="text-center">Condition</th>
                        <th class="text-right">Actions</th>

                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in FilteredItems)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td class="text-center">@item.AvailableQuantity / @item.TotalQuantity</td>

                            <td class="text-center">@item.Category.Name</td>
                            <td class="text-center">
                                <span
                                    class="@GetStatusBadgeClass(item.AvailabilityStatus)">@item.AvailabilityStatus</span>
                            </td>
                            <td class="text-center">@item.RentalStatus</td>
                            <td class="text-center">
                                <span class="@GetConditionBadgeClass(item.Condition)">@item.Condition</span>
                            </td>
                            <td class="text-right">
                                <div class="action-buttons">
                                    <button class="btn btn-sm btn-outline-secondary"
                                            @onclick="() => OpenItemDetailsModal(item)">
                                        <i class="fas fa-info-circle"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-secondary"
                                            @onclick="() => OpenEditItemModal(item)">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteItem(item)">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@* MODAL Add *@
@if (_isAddModalVisible)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New Inventory Item</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@_viewModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator/>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Name</label>
                                <InputText class="form-control" @bind-Value="_viewModel.Name"/>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Quantity</label>
                                <InputNumber class="form-control" @bind-Value="_viewModel.Quantity"/>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea class="form-control" @bind-Value="_viewModel.Description" rows="3"/>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Category</label>
                            <InputSelect class="form-select" @bind-Value="_viewModel.CategoryId">
                                @* The default "Uncategorized" value is set in the OpenAddModal method *@
                                @foreach (var category in _categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                                <option value="-1">** Create a new category **</option>
                            </InputSelect>
                        </div>

                        @if (_viewModel.CategoryId == -1)
                        {
                            <div class="mb-3 p-3 bg-light border rounded">
                                <label class="form-label">New Category Name</label>
                                <InputText class="form-control" @bind-Value="_viewModel.NewCategoryName"
                                           placeholder="e.g., Lighting, Audio, Cables"/>
                            </div>
                        }

                        <hr/>
                        <h5>Details</h5>

                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Availability</label>
                                <InputSelect class="form-select" @bind-Value="_viewModel.AvailabilityStatus">
                                    @foreach (var status in Enum.GetValues<AvailabilityStatus>())
                                    {
                                        <option value="@status">@status</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Condition</label>
                                <InputSelect class="form-select" @bind-Value="_viewModel.Condition">
                                    <option value="">-- Not specified --</option>
                                    @foreach (var cond in Enum.GetValues<Condition>())
                                    {
                                        <option value="@cond">@cond</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Loading Priority</label>
                                <InputSelect class="form-select" @bind-Value="_viewModel.TruckLoadingPriority">
                                    <option value="">-- Not specified --</option>
                                    @foreach (var priority in Enum.GetValues<TruckLoadingPriority>())
                                    {
                                        <option value="@priority">@priority</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Condition Description</label>
                            <InputTextArea class="form-control" @bind-Value="_viewModel.ConditionDescription" rows="2"/>
                        </div>

                        <hr/>
                        <h5>Rental Information</h5>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Rental Status</label>
                                <InputSelect class="form-select" @bind-Value="_viewModel.RentalStatus">
                                    @foreach (var status in Enum.GetValues<RentalStatus>())
                                    {
                                        <option value="@status">@status</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Rental Price (€)</label>
                                <InputNumber class="form-control" @bind-Value="_viewModel.RentalPricePerDay"/>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Rental Notes / Description</label>
                            <InputTextArea class="form-control" @bind-Value="_viewModel.RentalDescription" rows="2"/>
                        </div>

                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Weight (kg)</label>
                                <InputNumber class="form-control" @bind-Value="_viewModel.Weight"/>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Width (cm)</label>
                                <InputNumber class="form-control" @bind-Value="_viewModel.Width"/>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Height (cm)</label>
                                <InputNumber class="form-control" @bind-Value="_viewModel.Height"/>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseAddModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save Item</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-backdrop fade show" @onclick="CloseAddModal"></div>
}

@* MODAL Filter) *@
@if (_isFilterModalVisible)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Filter Inventory</h5>
                    <button type="button" class="btn-close" @onclick="CloseFilterModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label fw-bold">Category</label>
                        <div class="filter-checkbox-group">
                            @foreach (var category in _categories.OrderBy(c => c.Name))
                            {
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input"
                                           id="cat-@category.Id"
                                           checked="@_filters.SelectedCategoryIds.Contains(category.Id)"
                                           @onchange="() => ToggleSelection(_filters.SelectedCategoryIds, category.Id)"/>
                                    <label class="form-check-label" for="cat-@category.Id">@category.Name</label>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Availability Status</label>
                        <div class="filter-checkbox-group">
                            @foreach (var status in Enum.GetValues<AvailabilityStatus>())
                            {
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input"
                                           id="status-@status"
                                           checked="@_filters.SelectedAvailabilityStatuses.Contains(status)"
                                           @onchange="() => ToggleSelection(_filters.SelectedAvailabilityStatuses, status)"/>
                                    <label class="form-check-label" for="status-@status">@status</label>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Condition</label>
                        <div class="filter-checkbox-group">
                            @foreach (var cond in Enum.GetValues<Condition>())
                            {
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input"
                                           id="cond-@cond"
                                           checked="@_filters.SelectedConditions.Contains(cond)"
                                           @onchange="() => ToggleSelection(_filters.SelectedConditions, cond)"/>
                                    <label class="form-check-label" for="cond-@cond">@cond</label>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-link" @onclick="ClearFilters">Clear Filters</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseFilterModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="ApplyFilters">Apply Filters</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}


@* ITEM DETAILS MODAL *@
@if (_isItemDetailsModalVisible && _selectedItem is not null)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Item Details: @_selectedItem.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseItemDetailsModal"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <strong>Description</strong>
                            <p>@(_selectedItem.Description ?? "N/A")</p>
                        </div>
                        <div class="col-md-6">
                            <strong>Category</strong>
                            <p>@_selectedItem.Category.Name</p>
                        </div>
                    </div>
                    <hr/>
                    <div class="row">
                        <div class="col-md-4">
                            <strong>Quantity</strong>
                            <p>@_selectedItem.AvailableQuantity / @_selectedItem.TotalQuantity</p>
                        </div>
                        <div class="col-md-4">
                            <strong>Availability</strong>
                            <p>@_selectedItem.AvailabilityStatus</p>
                        </div>
                        <div class="col-md-4">
                            <strong>Condition</strong>
                            <p>@(_selectedItem.Condition?.ToString() ?? "Not specified")</p>
                        </div>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(_selectedItem.ConditionDescription))
                    {
                        <strong>Condition Notes</strong>
                        <p>@_selectedItem.ConditionDescription</p>
                    }
                    <hr/>
                    <h5>Dimensions & Logistics</h5>
                    <div class="row">
                        <div class="col-md-3"><strong>Weight:</strong> @(_selectedItem.Weight) kg</div>
                        <div class="col-md-3"><strong>Width:</strong> @(_selectedItem.Width) cm</div>
                        <div class="col-md-3"><strong>Height:</strong> @(_selectedItem.Height) cm</div>
                        <div class="col-md-3"><strong>Load
                                Priority:</strong> @(_selectedItem.TruckLoadingPriority?.ToString() ?? "N/A")</div>
                    </div>
                    <hr/>
                    <h5>Rental Information</h5>
                    <div class="row">
                        <div class="col-md-4"><strong>Rental Status:</strong> @_selectedItem.RentalStatus</div>
                        <div class="col-md-4"><strong>Rental Price:</strong> @_selectedItem.RentalPricePerDay.ToString("C")
                        </div>
                        <div class="col-md-4"><strong>Last
                                Rental:</strong> @_selectedItem.RentalDate.ToShortDateString()</div>
                    </div>
                    @if (!string.IsNullOrWhiteSpace(_selectedItem.RentalDescription))
                    {
                        <strong>Rental Notes</strong>
                        <p>@_selectedItem.RentalDescription</p>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseItemDetailsModal">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}



@* ITEM EDIT MODAL *@
@if (_isItemEditModalVisible && _selectedItem is not null)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit: @_viewModel.Name</h5>
                    <button type="button" class="btn-close" @onclick="CloseEditItemModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@_viewModel" OnValidSubmit="HandleUpdateSubmit">
                        <DataAnnotationsValidator/>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Name</label>
                                <InputText class="form-control" @bind-Value="_viewModel.Name"/>
                                <ValidationMessage For="@(() => _viewModel.Name)"/>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Quantity</label>
                                <InputNumber class="form-control" @bind-Value="_viewModel.Quantity"/>
                                <ValidationMessage For="@(() => _viewModel.Quantity)"/>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <InputTextArea class="form-control" @bind-Value="_viewModel.Description" rows="3"/>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Category</label>
                            <InputSelect class="form-select" @bind-Value="_viewModel.CategoryId">
                                @* We no longer need the "-- Select --" option here *@
                                @foreach (var category in _categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => _viewModel.CategoryId)"/>
                        </div>

                        <hr/>
                        <h5>Details</h5>

                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Availability</label>
                                <InputSelect class="form-select" @bind-Value="_viewModel.AvailabilityStatus">
                                    @foreach (var status in Enum.GetValues<AvailabilityStatus>())
                                    {
                                        <option value="@status">@status</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Condition</label>
                                <InputSelect class="form-select" @bind-Value="_viewModel.Condition">
                                    <option value="">-- Not specified --</option>
                                    @foreach (var cond in Enum.GetValues<Condition>())
                                    {
                                        <option value="@cond">@cond</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Loading Priority</label>
                                <InputSelect class="form-select" @bind-Value="_viewModel.TruckLoadingPriority">
                                    <option value="">-- Not specified --</option>
                                    @foreach (var priority in Enum.GetValues<TruckLoadingPriority>())
                                    {
                                        <option value="@priority">@priority</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Condition Description</label>
                            <InputTextArea class="form-control" @bind-Value="_viewModel.ConditionDescription" rows="2"/>
                        </div>

                        <hr/>
                        <h5>Rental Information</h5>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Rental Status</label>
                                <InputSelect class="form-select" @bind-Value="_viewModel.RentalStatus">
                                    @foreach (var status in Enum.GetValues<RentalStatus>())
                                    {
                                        <option value="@status">@status</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Rental Price (€)</label>
                                <InputNumber class="form-control" @bind-Value="_viewModel.RentalPricePerDay"/>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Rental Notes / Description</label>
                            <InputTextArea class="form-control" @bind-Value="_viewModel.RentalDescription" rows="2"/>
                        </div>

                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Weight (kg)</label>
                                <InputNumber class="form-control" @bind-Value="_viewModel.Weight"/>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Width (cm)</label>
                                <InputNumber class="form-control" @bind-Value="_viewModel.Width"/>
                            </div>
                            <div class="col-md-4 mb-3">
                                <label class="form-label">Height (cm)</label>
                                <InputNumber class="form-control" @bind-Value="_viewModel.Height"/>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseEditItemModal">Cancel
                            </button>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}



@code {
    private List<InventoryItem>? _allItems;
    private string _searchQuery = "";
    private bool _isAddModalVisible;
    private bool _isFilterModalVisible;
    private bool _isItemDetailsModalVisible;
    private bool _isItemEditModalVisible;
    private InventoryItem? _selectedItem; // To store the item being viewed
    private List<ItemCategory> _categories = new(); // For the dropdown
    private InventoryItemViewModel _viewModel = new();

    private InventoryFilterViewModel _filters = new();

    private IEnumerable<InventoryItem> FilteredItems
    {
        get
        {
            if (_allItems is null)
            {
                return Enumerable.Empty<InventoryItem>();
            }

            var query = _allItems.AsQueryable();

            if (!string.IsNullOrWhiteSpace(_searchQuery))
            {
                query = query.Where(item =>
                    item.Name.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase) ||
                    (item.Description != null && item.Description.Contains(_searchQuery, StringComparison.OrdinalIgnoreCase)));
            }

            if (_filters.SelectedCategoryIds.Any())
            {
                query = query.Where(item => _filters.SelectedCategoryIds.Contains(item.CategoryId));
            }

            if (_filters.SelectedAvailabilityStatuses.Any())
            {
                query = query.Where(item => _filters.SelectedAvailabilityStatuses.Contains(item.AvailabilityStatus));
            }

            if (_filters.SelectedConditions.Any())
            {
                query = query.Where(item => item.Condition.HasValue && _filters.SelectedConditions.Contains(item.Condition.Value));
            }

            return query.ToList();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        // Get all data from the database
        var itemsTask = InventoryRepo.GetAllAsync();
        var categoriesTask = CategoryRepo.GetAllAsync();
        await Task.WhenAll(itemsTask, categoriesTask);

        _allItems = (await itemsTask).ToList();
        _categories = (await categoriesTask).ToList();
    }

    private void ToggleSelection<T>(HashSet<T> set, T value)
    {
        if (set.Contains(value))
        {
            set.Remove(value);
        }
        else
        {
            set.Add(value);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (_viewModel.CategoryId == -1)
        {
            if (string.IsNullOrWhiteSpace(_viewModel.NewCategoryName))
            {
                // TODO: Add a proper validation message to the UI
                return;
            }

            var newCategory = new ItemCategory { Name = _viewModel.NewCategoryName };
            var createdCategory = await CategoryRepo.AddAsync(newCategory);
            _viewModel.CategoryId = createdCategory.Id;
        }

        var newItem = new InventoryItem
        {
            Name = _viewModel.Name,
            Description = _viewModel.Description,
            AvailableQuantity = _viewModel.Quantity,
            TotalQuantity = _viewModel.Quantity,
            CategoryId = _viewModel.CategoryId,
            AvailabilityStatus = _viewModel.AvailabilityStatus,
            Weight = _viewModel.Weight,
            Height = _viewModel.Height,
            Width = _viewModel.Width,
            TruckLoadingPriority = _viewModel.TruckLoadingPriority,
            RentalStatus = _viewModel.RentalStatus,
            RentalDate = _viewModel.RentalDate ?? DateTime.UtcNow,
            RentalPricePerDay = _viewModel.RentalPricePerDay,
            Condition = _viewModel.Condition,
            ConditionDescription = _viewModel.ConditionDescription,
            Category = null
        };

        await InventoryRepo.AddAsync(newItem);
        await LoadData();
        CloseAddModal();
    }

    private async Task HandleUpdateSubmit()
    {
        var itemToUpdate = _allItems?.FirstOrDefault(i => i.Id == _viewModel.Id);
        if (itemToUpdate is null)
        {
            // TODO: Handle error - item not found
            return;
        }

        itemToUpdate.Name = _viewModel.Name;
        itemToUpdate.Description = _viewModel.Description;
        itemToUpdate.TotalQuantity = _viewModel.Quantity;
        itemToUpdate.CategoryId = _viewModel.CategoryId;
        itemToUpdate.AvailabilityStatus = _viewModel.AvailabilityStatus;
        itemToUpdate.Weight = _viewModel.Weight;
        itemToUpdate.Height = _viewModel.Height;
        itemToUpdate.Width = _viewModel.Width;
        itemToUpdate.TruckLoadingPriority = _viewModel.TruckLoadingPriority;
        itemToUpdate.RentalStatus = _viewModel.RentalStatus;
        itemToUpdate.RentalPricePerDay = _viewModel.RentalPricePerDay;
        itemToUpdate.Condition = _viewModel.Condition;
        itemToUpdate.ConditionDescription = _viewModel.ConditionDescription;

        await InventoryRepo.UpdateAsync(itemToUpdate);

        await LoadData();
        CloseEditItemModal();
    }

    private async Task DeleteItem(InventoryItem item)
    {
        await InventoryRepo.DeleteAsync(item.Id);
        await LoadData();
    }

    // MODAL OPENING AND CLOSING FUNCTIONS
    private void OpenAddModal()
    {
        var uncategorized = _categories.FirstOrDefault(c => c.Name == "Uncategorized");
        var defaultCategoryId = uncategorized?.Id ?? 1;

        _viewModel = new InventoryItemViewModel
        {
            CategoryId = defaultCategoryId
        };

        _isAddModalVisible = true;
    }

    private void CloseAddModal()
    {
        _isAddModalVisible = false;
    }

    private void OpenFilterModal()
    {
        _isFilterModalVisible = true;
    }

    private void CloseFilterModal()
    {
        _isFilterModalVisible = false;
    }

    private void OpenItemDetailsModal(InventoryItem item)
    {
        _selectedItem = item;
        _isItemDetailsModalVisible = true;
    }

    private void CloseItemDetailsModal()
    {
        _isItemDetailsModalVisible = false;
        _selectedItem = null;
    }

    private void OpenEditItemModal(InventoryItem item)
    {
        _selectedItem = item;

        _viewModel = new InventoryItemViewModel
        {
            Id = item.Id,
            Name = item.Name,
            Description = item.Description,
            Quantity = item.TotalQuantity,
            CategoryId = item.CategoryId,
            AvailabilityStatus = item.AvailabilityStatus,
            Weight = item.Weight,
            Height = item.Height,
            Width = item.Width,
            TruckLoadingPriority = item.TruckLoadingPriority,
            RentalStatus = item.RentalStatus,
            RentalPricePerDay = item.RentalPricePerDay,
            Condition = item.Condition,
            ConditionDescription = item.ConditionDescription
        };

        _isItemEditModalVisible = true;
    }

    private void CloseEditItemModal()
    {
        _isItemEditModalVisible = false;
        _selectedItem = null;
    }

    private void ApplyFilters()
    {
        CloseFilterModal();
    }

    private void ClearFilters()
    {
        _filters = new InventoryFilterViewModel();
        CloseFilterModal();
    }

    private string GetConditionBadgeClass(Condition? condition)
    {
        if (!condition.HasValue)
        {
            return "badge bg-secondary";
        }

        return condition.Value switch
        {
            Condition.New => "badge bg-success",
            Condition.Damaged => "badge bg-warning text-dark",
            Condition.Lost => "badge bg-danger",
            _ => "badge bg-secondary"
        };
    }

    private string GetStatusBadgeClass(AvailabilityStatus status)
    {
        return status switch
        {
            AvailabilityStatus.Available => "badge bg-success",
            AvailabilityStatus.Unavailable => "badge bg-danger",
            _ => "badge bg-secondary"
        };
    }

}